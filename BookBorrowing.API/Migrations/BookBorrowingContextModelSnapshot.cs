// <auto-generated />
using System;
using BookBorrowing.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookBorrowing.API.Migrations
{
    [DbContext(typeof(BookBorrowingContext))]
    partial class BookBorrowingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookBorrowing.API.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBook"));

                    b.Property<string>("AuthorName")
                        .HasMaxLength(150)
                        .HasColumnType("nchar(150)")
                        .HasColumnName("authorName")
                        .IsFixedLength();

                    b.Property<string>("BookEdition")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("bookEdition")
                        .IsFixedLength();

                    b.Property<string>("BookImg")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("bookImg");

                    b.Property<string>("BookName")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("bookName")
                        .IsFixedLength();

                    b.Property<DateTime?>("PublisherDate")
                        .HasColumnType("date")
                        .HasColumnName("publisherDate");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("publisherName")
                        .IsFixedLength();

                    b.HasKey("IdBook")
                        .HasName("PK_Book_1");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookBorrowing.API.Models.Borrowing", b =>
                {
                    b.Property<int>("IdBorrowing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBorrowing");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBorrowing"));

                    b.Property<DateTime>("BorrowingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("borrowingDate");

                    b.Property<DateTime>("DevolutionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("devolutionDate");

                    b.Property<int>("IdBorrowingBook")
                        .HasColumnType("int")
                        .HasColumnName("idBorrowingBook");

                    b.Property<int>("IdBorrowingClient")
                        .HasColumnType("int")
                        .HasColumnName("idBorrowingClient");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit")
                        .HasColumnName("returned");

                    b.HasKey("IdBorrowing")
                        .HasName("PK_Borrowing_1");

                    b.ToTable("Borrowing");
                });

            modelBuilder.Entity("BookBorrowing.API.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("adress")
                        .IsFixedLength();

                    b.Property<string>("CellNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nchar(14)")
                        .HasColumnName("cellNumber")
                        .IsFixedLength();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .HasColumnName("city")
                        .IsFixedLength();

                    b.Property<string>("ClientCpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nchar(14)")
                        .HasColumnName("clientCPF")
                        .IsFixedLength();

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nchar(150)")
                        .HasColumnName("clientName")
                        .IsFixedLength();

                    b.HasKey("IdClient")
                        .HasName("PK_Client_1");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("BookBorrowing.API.Models.ViewBorrowing", b =>
                {
                    b.Property<string>("BookName")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("bookName")
                        .IsFixedLength();

                    b.Property<DateTime>("BorrowingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("borrowingDate");

                    b.Property<string>("ClientCpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nchar(14)")
                        .HasColumnName("clientCPF")
                        .IsFixedLength();

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nchar(150)")
                        .HasColumnName("clientName")
                        .IsFixedLength();

                    b.Property<DateTime>("DevolutionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("devolutionDate");

                    b.Property<int>("IdBorrowing")
                        .HasColumnType("int")
                        .HasColumnName("idBorrowing");

                    b.Property<int>("IdBorrowingBook")
                        .HasColumnType("int")
                        .HasColumnName("idBorrowingBook");

                    b.Property<int>("IdBorrowingClient")
                        .HasColumnType("int")
                        .HasColumnName("idBorrowingClient");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit")
                        .HasColumnName("returned");

                    b.ToTable((string)null);

                    b.ToView("ViewBorrowing", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
